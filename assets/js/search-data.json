{
  
    
        "post0": {
            "title": "Title",
            "content": "References: . https://towardsdatascience.com/modeling-exponential-growth-49a2b6f22e1f | https://towardsdatascience.com/modeling-logistic-growth-1367dc971de2 | https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5348083/ | Us-Only Data: https://github.com/nytimes/covid-19-data | . Load the data . %matplotlib inline import pandas as pd import numpy as np from csaps import csaps import matplotlib import numpy as np import matplotlib.pyplot as plt import matplotlib.font_manager as font_manager import matplotlib.patches as patches . dfconf = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot;) dfdied = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot;) dfrcvd = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&quot;) . display(dfconf.head()) display(dfdied.head()) display(dfrcvd.head()) . Province/State Country/Region Lat Long 1/22/20 1/23/20 1/24/20 1/25/20 1/26/20 1/27/20 ... 3/27/20 3/28/20 3/29/20 3/30/20 3/31/20 4/1/20 4/2/20 4/3/20 4/4/20 4/5/20 . 0 NaN | Afghanistan | 33.0000 | 65.0000 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 110 | 110 | 120 | 170 | 174 | 237 | 273 | 281 | 299 | 349 | . 1 NaN | Albania | 41.1533 | 20.1683 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 186 | 197 | 212 | 223 | 243 | 259 | 277 | 304 | 333 | 361 | . 2 NaN | Algeria | 28.0339 | 1.6596 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 409 | 454 | 511 | 584 | 716 | 847 | 986 | 1171 | 1251 | 1320 | . 3 NaN | Andorra | 42.5063 | 1.5218 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 267 | 308 | 334 | 370 | 376 | 390 | 428 | 439 | 466 | 501 | . 4 NaN | Angola | -11.2027 | 17.8739 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 4 | 5 | 7 | 7 | 7 | 8 | 8 | 8 | 10 | 14 | . 5 rows × 79 columns . Province/State Country/Region Lat Long 1/22/20 1/23/20 1/24/20 1/25/20 1/26/20 1/27/20 ... 3/27/20 3/28/20 3/29/20 3/30/20 3/31/20 4/1/20 4/2/20 4/3/20 4/4/20 4/5/20 . 0 NaN | Afghanistan | 33.0000 | 65.0000 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 4 | 4 | 4 | 4 | 4 | 4 | 6 | 6 | 7 | 7 | . 1 NaN | Albania | 41.1533 | 20.1683 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 8 | 10 | 10 | 11 | 15 | 15 | 16 | 17 | 20 | 20 | . 2 NaN | Algeria | 28.0339 | 1.6596 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 26 | 29 | 31 | 35 | 44 | 58 | 86 | 105 | 130 | 152 | . 3 NaN | Andorra | 42.5063 | 1.5218 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 3 | 3 | 6 | 8 | 12 | 14 | 15 | 16 | 17 | 18 | . 4 NaN | Angola | -11.2027 | 17.8739 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 | . 5 rows × 79 columns . Province/State Country/Region Lat Long 1/22/20 1/23/20 1/24/20 1/25/20 1/26/20 1/27/20 ... 3/27/20 3/28/20 3/29/20 3/30/20 3/31/20 4/1/20 4/2/20 4/3/20 4/4/20 4/5/20 . 0 NaN | Afghanistan | 33.0000 | 65.0000 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 2 | 2 | 2 | 2 | 5 | 5 | 10 | 10 | 10 | 15 | . 1 NaN | Albania | 41.1533 | 20.1683 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 31 | 31 | 33 | 44 | 52 | 67 | 76 | 89 | 99 | 104 | . 2 NaN | Algeria | 28.0339 | 1.6596 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 29 | 31 | 31 | 37 | 46 | 61 | 61 | 62 | 90 | 90 | . 3 NaN | Andorra | 42.5063 | 1.5218 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 1 | 1 | 1 | 10 | 10 | 10 | 10 | 16 | 21 | 26 | . 4 NaN | Angola | -11.2027 | 17.8739 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 2 | 2 | . 5 rows × 79 columns . def logistic(t, a, b, c): return c/(1 + a * np.exp(-b*t)) def smoother(df_in, col=&quot;Deaths&quot;, smooth_amount=0.2): y = df_in[col] x = y.index fit_x = np.arange(len(y)) fit_y = csaps(fit_x, y, fit_x, smooth=smooth_amount) # Add to dataframe and save temp = pd.DataFrame(index=x) temp[&#39;Smoother&#39;] = fit_y.astype(int) return df_in.join(temp, how=&quot;left&quot;) def local_max(data, thresh=None, x=[], min_peak_separation=None): &#39;&#39;&#39;Find local maxima Input: data - Amplitude data for peak searching thresh - Finds peaks in data ABOVE this level x - x-axis data, or [] dx - Minimum x-axis peak separation, or [] plots - 1 = plots, 0 = no plots (optional) Output: mxInds - Indices of maxima mxVals - Amplitudes of correspondin maxima Notes: 1. When dx = [], or omitted, ALL peaks above threshold will be found. 2. When the x = [], or omitted, equispaced data are assumed # Example data = np.array([1,2,3,4,5,4,3,4,5,4,3,2,1]) x = np.arange(len(data)) x[3] = x[3] = x[2] min_peak_separation = 2 print(local_max(data, min_peak_separation=2, x=x)) &gt;&gt;&gt; ([4, 8], [5, 5]) &#39;&#39;&#39; y = data.copy() if thresh != None: y[y &lt; thresh] = -1e-50 dy = np.diff(y) d2y = np.diff(dy) # Find the maxima dyChSign = [int(x) for x in (dy &lt;= 0)] # Find where dy changes sign temp1 = np.diff(dyChSign) # Find where dy changes sign form pos to neg mxInds = np.intersect1d(np.where(temp1 &gt; 0), np.where(d2y &lt; 0)) + 1; # +1 accounts for the diff mxVals = y[mxInds] if min_peak_separation is not None: if len(x) == 0: xMaxVals = mxInds else: xMaxVals = x[mxInds] df = np.diff(xMaxVals); fd = np.where(np.abs(df) &gt; min_peak_separation)[0]; # find large separations --&gt; next sh2 region intervals = len(fd)+1; # Number of regions inds = [-1] + list(fd) + [len(mxInds)-1]; # Set up indices of intervals pkVals2 = [] pkInds2 = [] for i in range(intervals): indx = np.arange(inds[i]+1, inds[i+1]+1); # The intervals in Times y array windLo = mxInds[indx[0]]; windHi = mxInds[indx[-1]]; # Window the intervals temp = y[windLo:windHi+1] d1 = max(temp) d2 = np.argmax(temp) # Take max in interval pkVals2.append(d1) pkInds2.append(windLo + d2); mxInds = pkInds2; mxVals = pkVals2; return mxInds, mxVals . def plot_status(fraction_to_midpoint, title_text=&#39;&#39;, plot_size=(8, 4)): n_pts = 200 ylim_bounds = 7 x = np.linspace(-ylim_bounds, ylim_bounds, n_pts) y = logistic(x, 1, 1, 1) dx = np.diff(y, prepend = 0) d2x = np.diff(dx, prepend = 0) maxInds, maxVals = local_max(d2x, min_peak_separation=100) maxInds2, maxVals2 = local_max(-d2x, min_peak_separation=100) fig = plt.figure(figsize=plot_size) ax = fig.add_subplot(111) # Plot Logistic ax.plot(x, y, &#39;#cdcdcd&#39;, lw=10) ax2 = ax.twinx() # ax2.plot(x, dx, &#39;orange&#39;, alpha=1) # ax2.plot(x, d2x, &#39;blue&#39;, alpha=1) # ax2.axhline(y=0, color=&#39;w&#39;, linestyle=&#39;-&#39;, alpha=0.2) pt_A = x[maxInds[0]-2] pt_B = x[maxInds2[0]-1] ax.vlines(0, ymin=0, ymax=1, linewidth=1, color=&#39;gray&#39;, alpha=0.2) # ax.vlines(pt_A, ymin=0, ymax=1, linewidth=2, color=&#39;r&#39;) # ax.vlines(pt_B, ymin=0, ymax=1, linewidth=2, color=&#39;r&#39;) active_point = pt_A + np.abs(pt_A)*fraction_to_midpoint active_x = x[x &lt;= active_point] active_y = y[:len(active_x)] # Plot logistic progress ax.plot(active_x, active_y, &#39;b&#39;, lw=8) # ax.vlines(active_point, ymin=0, ymax=1, linewidth=2, color=&#39;r&#39;) # Plot rectangle colors red = &#39;#e03531&#39; yellow = &#39;#f0bd27&#39; green = &#39;#51b364&#39; alpha = 0.65 rect_1 = patches.Rectangle((-ylim_bounds, 0), pt_A - -ylim_bounds, 1, color=red, alpha=alpha) rect_2 = patches.Rectangle((pt_A, 0), -2*pt_A, 1, color=yellow, alpha=alpha) rect_3 = patches.Rectangle((pt_A-2*pt_A, 0), pt_A - -ylim_bounds, 1, color=green, alpha=alpha) ax.add_patch(rect_1) ax.add_patch(rect_2) ax.add_patch(rect_3) plt.xlim([-ylim_bounds, ylim_bounds]) plt.ylim([0, 1]) ax.axis(&#39;off&#39;) ax2.axis(&#39;off&#39;) plt.title(title_text, weight=&#39;bold&#39;, fontsize=14) txt=&quot;Slow Start&quot; y_point = 0.05 plt.figtext(.28, y_point, txt, wrap=True, horizontalalignment=&#39;center&#39;, fontsize=14) txt=&quot;Fast Growth&quot; plt.figtext(.51, y_point, txt, wrap=True, horizontalalignment=&#39;center&#39;, fontsize=14) txt=&quot;Flattening&quot; plt.figtext(.71, y_point, txt, wrap=True, horizontalalignment=&#39;left&#39;, fontsize=14) # txt=&quot;Time --&gt;&quot; # plt.figtext(.51, -0.05, txt, wrap=True, horizontalalignment=&#39;center&#39;, fontsize=14) txt=&quot;Deaths --&gt;&quot; plt.figtext(.115, 0.5, txt, wrap=True, horizontalalignment=&#39;center&#39;, fontsize=14, rotation=90) plt.show() def find_fraction_to_midpoint(data): &quot;&quot;&quot; # If there&#39;s a max: # 1. Find last zero of neg before max if a max exists # 2. Find max # 3. Find any non-positive value after max &quot;&quot;&quot; data[data &lt; 0] = 0 # No need for negative values # Find maxima maxInds, maxVals = local_max(data, min_peak_separation=100) if maxInds != []: # Did it cross zero on the right yet? # Find first zero-crossing (if any) beyond maxInds delta_to_pt_B = np.where(data[maxInds[0]:] &lt;= 0)[0] if len(delta_to_pt_B): pts_to_end = (len(data) - (delta_to_pt_B[0] + maxInds[0])) # Percentage of mid-region fraction_to_midpoint = 1 + pts_to_end / delta_to_pt_B[0] else: # Find early zero crossing idx_last_early_zero = np.where(data == 0)[0][-1] # Inds from last early zero to point A inds_to_A = maxInds[0] - idx_last_early_zero days_beyond_pt_A = len(data) - maxInds[0] fraction_to_midpoint = days_beyond_pt_A / inds_to_A return fraction_to_midpoint def plot_slopes(d, country, offset=40): fig = plt.figure(figsize=(14, 6)) ax = fig.add_subplot(111) d[offset:].Smoother.plot(ax=ax, color=&#39;red&#39;, lw=5, alpha=1) plt.legend(loc=2) ax2 = ax.twinx() d[offset:].dx.plot(ax=ax2, color=&#39;orange&#39;, lw=4, alpha=0.8) d[offset:].d2x.plot(ax=ax2, color=&#39;blue&#39;, lw=2, alpha=0.7) maxInds, maxVals = local_max(d[offset:].d2x.values, min_peak_separation=100) d[offset:].d2x[maxInds].plot(ax=ax2, marker=&#39;o&#39;, ms=12) ax2.axhline(y=0, color=&#39;g&#39;, linestyle=&#39;--&#39;) ax2.set_ylabel(&#39;Number of Deaths&#39;) ax2.set_ylabel(&#39;Number of New Deaths Per Day&#39;) plt.legend(loc=9) plt.title(country) plt.show(); NON_DATE_COLS = [&quot;Province/State&quot;, &quot;Country/Region&quot;, &quot;Lat&quot;, &quot;Long&quot;, &quot;Country&quot;] def prepare_data(df): date_cols = [c for c in df.columns if c not in NON_DATE_COLS] # Collapse by country in the case where there are multiple # regions in a country df_plot = dfdied.groupby(by=&quot;Country/Region&quot;).sum() # Sort to position highest numberss first df_plot.sort_values(by=date_cols[-1], inplace=True, ascending=False) threshold_for_total_events = 200 df_plot = df_plot[df_plot[date_cols[-1]] &gt; threshold_for_total_events].reset_index()#[date_cols] df_plot = df_plot.rename(columns={&quot;Country/Region&quot;: &quot;Country&quot;})[[&quot;Country&quot;] + date_cols] return df_plot def make_dervatives(df, country): date_cols = [c for c in df.columns if c not in NON_DATE_COLS] data = df[df.Country == country][date_cols].T data.index = pd.to_datetime(data.index) d = pd.DataFrame(index=pd.to_datetime(pd.date_range(data.index.values[0], periods=len(data)+7, freq=&#39;d&#39;).strftime(&#39;%m/%d/%Y&#39;))) d = d.join(data) d.columns = [&#39;Deaths&#39;] # Add new column, &quot;Smoother&quot;, to dataframe d = smoother(d.loc[d[&#39;Deaths&#39;].notnull()], smooth_amount=.26) d[&#39;Smoother&#39;] = d.Smoother.round().astype(int) d[&#39;dx&#39;] = np.diff(d.Smoother, prepend=d.Deaths[0]) d[&#39;d2x&#39;] = np.diff(d.dx, prepend=d.Smoother[0]) return d . # Create the data df = prepare_data(dfdied) dfd = make_dervatives(df, &#39;Italy&#39;) countries = df.Country.values last_date = dfd.tail(1).columns[-1] for country in countries[:10]: dfd = make_dervatives(df, country) title_text = &quot;{:} nTotal Deaths: {:,} as of {:}&quot;.format(country, int(dfd.Deaths[-1]), str(dfd.index[-1])[:10]) plot_status(find_fraction_to_midpoint(dfd.d2x.values), title_text, plot_size=(8, 3)) plt.show() # Show the slope plots for verification/investigation #plot_slopes(d, country) .",
            "url": "https://bennettdatascience.github.io/fastpages/2020/04/06/COVID-19.html",
            "relUrl": "/2020/04/06/COVID-19.html",
            "date": " • Apr 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bennettdatascience.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://bennettdatascience.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bennettdatascience.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}